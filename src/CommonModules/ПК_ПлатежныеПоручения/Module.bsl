Функция ДанныеДляОтвета(ПараметрыЗапросаHTTP) Экспорт
	
	Перем Результат;
	
	Если ПК_ОбщегоНазначенияСервер.ЭтоGET(ПараметрыЗапросаHTTP.HTTPМетод) Тогда
		
		Результат = СостояниеБанковскихДокументов(ПараметрыЗапросаHTTP);
		
	ИначеЕсли ПК_ОбщегоНазначенияСервер.ЭтоPOST(ПараметрыЗапросаHTTP.HTTPМетод) Тогда
		
		Результат = СоздатьПлатежноеПоручение(ПараметрыЗапросаHTTP);
		
	ИначеЕсли ПК_ОбщегоНазначенияСервер.ЭтоPATCH(ПараметрыЗапросаHTTP.HTTPМетод) Тогда
		
		Результат = ИзменитьПлатежноеПоручение(ПараметрыЗапросаHTTP);
		
	КонецЕсли;
	
	Возврат ПК_ОбщегоНазначенияСервер.РезультатЗапросаВСтруктуруИлиМассив(Результат);
	
КонецФункции



#Область ПрограммныйИнтерфейс
Функция СостояниеБанковскихДокументов(Знач ПараметрыЗапросаHTTP)
	
	Перем Запрос, Результат;
	
	Запрос = Новый Запрос;
	//TODO: Удалить тестовые комменты
	//Установка значений параметров
	//Запрос.УстановитьПараметр("PaymentOrderUUID", Новый УникальныйИдентификатор("d9dfcbd4-83de-11f0-a4e4-000c29f1c0b3"));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПлатежноеПоручение.Ссылка)) КАК PaymentOrderUUID,
	|	ВЫБОР
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.ПустаяСсылка) = СостоянияБанковскихДокументов.Состояние ТОГДА ""Создано""
	|		ИНАЧЕ Представление(СостоянияБанковскихДокументов.Состояние)
	|	КОНЕЦ КАК Status
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО (ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект)
	|ГДЕ
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПлатежноеПоручение.Ссылка) = &PaymentOrderUUID";
	
	Запрос.УстановитьПараметр("PaymentOrderUUID", Новый УникальныйИдентификатор(ПараметрыЗапросаHTTP.ПараметрыURL.Получить("PaymentOrderUUID")));
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Функция ИзменитьПлатежноеПоручение(Знач ПараметрыЗапросаHTTP)
	УИДПлатежногоПоручения = ПараметрыЗапросаHTTP.ПараметрыURL.Получить("PaymentOrderUUID");
	УИДДоговора = ПараметрыЗапросаHTTP.ДесериализованноеТелоЗапроса.contractUUID;
	ПлатежноеПоручениеСсылка = Документы.ПлатежноеПоручение.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДПлатежногоПоручения));
	ДоговорКонтарегнтаСсылка = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДДоговора));
	
	
	//Изменение объекта
	
	ПлатежноеПоручениеОбъект = ПлатежноеПоручениеСсылка.ПолучитьОбъект();
	
	НачатьТранзакцию();
	
	ПлатежноеПоручениеОбъект.ДоговорКонтрагента = ДоговорКонтарегнтаСсылка;
	
	Попытка
		ПлатежноеПоручениеОбъект.Записать(?(ПлатежноеПоручениеОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	//Конец изменения объекта
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПлатежноеПоручение.Ссылка)) КАК PaymentOrderUUID,
	|	""Изменено"" КАК Status
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПлатежноеПоручение.Ссылка) = &PaymentOrderUUID";
	
	Запрос.УстановитьПараметр("PaymentOrderUUID", Новый УникальныйИдентификатор(УИДПлатежногоПоручения));
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции // ИзменитьПлатежноеПоручение()


Функция СоздатьПлатежноеПоручение(ПараметрыЗапросаHTTP)
	НачатьТранзакцию();
	
	Источник = ПараметрыЗапросаHTTP.ДесериализованноеТелоЗапроса;
	
	Попытка
		Организация = Справочники.Организации.НайтиОрганизацию(Источник.INN);
		ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		ВидОперации = ВРег(Источник.ВидОперации);
		
		ДозаполнитьПриЗагрузке = Ложь;
		
		ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
		ДокументОбъект.Дата = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(Источник.Date);
		ДокументОбъект.Организация = Организация;
		
		//ДокументОбъект.Ответственный = ПараметрыИнтеграции.ОбщиеДанные.ТекущийПользователь; //TODO: Прописать ответственным гуиды пользователей из справочника Спарвочник.Пользователи
		
		ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "НазначениеПлатежа", Источник.PaymentAppointment);
		ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ВидПлатежа", ?(Источник.PaymentType = "","",Источник.PaymentType));
		ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ОчередностьПлатежа", Источник.PaymentOrder);
		
		ДокументОбъект.СуммаДокумента = Источник.PaymentAmount;
		
		//Если ВидОперации = "ПЕРЕЧИСЛЕНИЕПОДОТЧЕТНОМУЛИЦУ" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу;
		//	
		//	Контрагент = ПолучитьЗначениеПоля(Реквизиты, "Контрагент", КонтейнерСсылок.Контрагенты);
		//	ДокументОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "АЭ_ФизическоеЛицо");
		//	
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Истина, Истина);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	
		//ИначеЕсли ВидОперации = "ПЕРЕЧИСЛЕНИЕЗАРАБОТНОЙПЛАТЫРАБОТНИКУ" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
		//	
		//	Контрагент = ПолучитьЗначениеПоля(Реквизиты, "Контрагент", КонтейнерСсылок.Контрагенты);
		//	ДокументОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "АЭ_ФизическоеЛицо");
		//	
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Истина, Истина);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	
		//ИначеЕсли ВидОперации = "ОПЛАТАПОСТАВЩИКУ" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		//	
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "Контрагент", Реквизиты,, КонтейнерСсылок.Контрагенты);
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Ложь, Ложь);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ДоговорКонтрагента", Реквизиты,, КонтейнерСсылок.ДоговорыКонтрагентов);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтавкаНДС", Реквизиты,, КонтейнерСсылок.СтавкиНДС);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", Реквизиты,, КонтейнерСсылок.СтатьиДвиженияДенежныхСредств);
		//	
		//	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДокументОбъект.СтавкаНДС);
		//	ДокументОбъект.СуммаНДС = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
		//	
		//ИначеЕсли ВидОперации = "ПРОЧИЕРАСЧЕТЫСКОНТРАГЕНТАМИ" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		//	
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "Контрагент", Реквизиты,, КонтейнерСсылок.Контрагенты);
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Ложь, Ложь);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ДоговорКонтрагента", Реквизиты,, КонтейнерСсылок.ДоговорыКонтрагентов);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтавкаНДС", Реквизиты,, КонтейнерСсылок.СтавкиНДС);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", Реквизиты,, КонтейнерСсылок.СтатьиДвиженияДенежныхСредств);
		//	
		//	ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДокументОбъект.СтавкаНДС);
		//	ДокументОбъект.СуммаНДС = Окр(СуммаДокумента * ПроцентНДС / (100 + ПроцентНДС), 2);
		//	
		//ИначеЕсли ВидОперации = "ПРОЧЕЕСПИСАНИЕ" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
		//	
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "Контрагент", Реквизиты,, КонтейнерСсылок.Контрагенты);
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Ложь, Ложь);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ДоговорКонтрагента", Реквизиты,, КонтейнерСсылок.ДоговорыКонтрагентов);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтавкаНДС", Реквизиты,, КонтейнерСсылок.СтавкиНДС);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", Реквизиты,, КонтейнерСсылок.СтатьиДвиженияДенежныхСредств);
		//	
		//ИначеЕсли ВидОперации = "УПЛАТАНАЛОГА" Тогда
		//	
		//	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
		//	
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "Контрагент", Реквизиты,, КонтейнерСсылок.Контрагенты);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "Налог", Реквизиты,, КонтейнерСсылок.ВидыНалоговИПлатежейВБюджет);
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "ВидНалоговогоОбязательства", Реквизиты,, КонтейнерСсылок.ВидыПлатежейВГосБюджет);
		//	
		//	КТФ_ПлатежноеПоручение_ЗаполнениеПоКонтрагенту(ДокументОбъект);
		//	КТФ_ЗаполнитьАвтоЗначенияРеквизитов(ДокументОбъект, Ложь, Ложь);
		//	КТФ_ПлатежноеПоручение_ЗаполнитьРеквизитыПлатежаВБюджет(ДокументОбъект);
		//	
		//	СчетКонтрагента = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетКонтрагента);
		//	Если ЗначениеЗаполнено(СчетКонтрагента) Тогда
		//		ДокументОбъект.СчетКонтрагента = СчетКонтрагента;
		//	КонецЕсли;
		//	ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", Реквизиты,, КонтейнерСсылок.СтатьиДвиженияДенежныхСредств);
		//	
		//КонецЕсли;
		//
		//ДокументОбъект.СчетОрганизации = БанковскийСчетИзДанных(ДокументОбъект.Организация, Реквизиты.СчетОрганизации);
		//ПК_ОбщегоНазначенияСервер.УстановитьРеквизитНеПустымЗначением(ДокументОбъект, "СтатьяДвиженияДенежныхСредств", Реквизиты,, КонтейнерСсылок.СтатьиДвиженияДенежныхСредств);

		//ДокументОбъект.ПометкаУдаления = Ложь;
		//ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		//
		//ПроверкаДатКонтроляПослеЗаполнения(ПараметрыИнтеграции, ДокументОбъект, ОбновлениеДанных);
		//
		//ИдентификаторВладельца = Неопределено;
		//ЗаписьПубличногоИдентификатора(ПараметрыИнтеграции.ОбщиеДанные.УзелОбмена, ДокументОбъект.Ссылка, ИдентификаторИсточника, ИдентификаторВладельца, Статус);
		//
		//Если НЕ Источник.НеПроводить Тогда 
		//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//КонецЕсли;
		//
		//КонтейнерСсылокПлатежныеПоручения.Вставить(ИдентификаторИсточника, ДокументОбъект.Ссылка);
		//
		//ЗафиксироватьТранзакцию();
		//
		//Если Статус = 1 ИЛИ Статус = 2 Тогда
		//	
		//	ПараметрыИнтеграции.КонтейнерСтатистики.Вставить("КоличествоОбработанныхОбъектов", ПараметрыИнтеграции.КонтейнерСтатистики.КоличествоОбработанныхОбъектов + 1);
		//	
		//КонецЕсли;
		//
		//
		//ДобавитьСообщениеОтвета(ПараметрыИнтеграции, ДокументОбъект.Ссылка, ИдентификаторИсточника, ИдентификаторВладельца, Статус, ОшибкаВРамкахТранзакции);
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		//Ошибка = ИнформацияОбОшибке();
		//ОбрабоктаОшибки(ПараметрыИнтеграции, Статус, Ошибка, ОшибкиВРамкахТранзакции);
		//
		//ОшибкаВРамкахТранзакции = ОшибкиВРамкахТранзакции[ОшибкиВРамкахТранзакции.ВГраница()];
		//
		//ДобавитьСообщениеОтвета(ПараметрыИнтеграции, ДокументОбъект.Ссылка, ИдентификаторИсточника, ИдентификаторВладельца, Статус, ОшибкаВРамкахТранзакции);
		
	КонецПопытки;
	
	//
	//Если ЗначениеЗаполнено(АдресХранилища) Тогда
	//	ПоместитьРезультатВоВРеменноеХарнилище(ПараметрыИнтеграции, "ПлатежноеПоручение", , АдресХранилища);
	//КонецЕсли;
	
КонецФункции // ()

#КонецОбласти






